alertmanager:
  config: # https://prometheus.io/docs/alerting/latest/configuration/
    global:
      slack_api_url: '${SLACK_INCOMING_WEBHOOK_URL}'
      smtp_smarthost: '${SMTP_HOSTNAME}:${SMTP_HOSTPORT}'
      smtp_auth_username: '${SMTP_USERNAME}'
      smtp_auth_password: '${SMTP_PASSWORD}'
      smtp_require_tls: ${SMTP_REQUIRE_TLS}
      smtp_from: '${SMTP_FROM}'
    route:
      receiver: slack-notifications
      group_by: [ 'alertname', 'job' ]
      routes:
        - match:
            severity: warning
          continue: true
          receiver: slack-notifications
        - match:
            severity: warning
          receiver: email-notifications
    receivers:
      - name: 'email-notifications'
        email_configs:
          - to: '${EMAIL_ADDRESS}'
            send_resolved: true
      - name: 'slack-notifications'
        slack_configs:
          - channel: '${SLACK_CHANNEL}'
            send_resolved: true
  alertmanagerSpec:
    logLevel: '${LOG_LEVEL}'
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: [ 'ReadWriteOnce' ]
          resources:
            requests:
              storage: 2Gi
grafana:
  logLevel: '${LOG_LEVEL}'
  smtp: # https://grafana.com/docs/grafana/next/setup-grafana/configure-grafana/#smtp
    enabled: true
    host: '${SMTP_HOSTNAME}:${SMTP_HOSTPORT}'
    username: '${SMTP_USERNAME}'
    password: '${SMTP_PASSWORD}'
    from_address: '${SMTP_FROM}'
    skip_verify: ${SMTP_SKIP_SSL_VERIFY}
  persistence:
    enabled: true
    accessModes: [ 'ReadWriteOnce' ]
    size: 2Gi

prometheusOperator:
  logLevel: '${LOG_LEVEL}'

prometheus:
  prometheusSpec:
    logLevel: '${LOG_LEVEL}'
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: [ 'ReadWriteOnce' ]
          resources:
            requests:
              storage: 2Gi